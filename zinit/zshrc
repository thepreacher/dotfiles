
### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zinit-zsh/z-a-rust \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-bin-gem-node


### End of Zinit's installer chunk


### Added

# Colored manpage
man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

# Load aliases and functions
for file in ~/.{zaliases,functions}; do
  [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

############# SETOPT ######################################
# http://zsh.sourceforge.net/Doc/Release/Options-Index.html
# ===== Basics
# please no beeeeeeps
setopt NO_BEEP
# list jobs in the long format by default
setopt LONG_LIST_JOBS
# allow comments even in interactive shells
setopt INTERACTIVECOMMENTS
# all unquoted arguments of the form identifier=expression appearing after the command name have file expansion
setopt MAGIC_EQUAL_SUBST
# append a trailing ‘/’ to all directory names resulting from filename generation
setopt MARK_DIRS

# do not beeep, please
unsetopt HIST_BEEP
# do not freezes output to the terminal until you type ^q `\
unsetopt FLOWCONTROL

# ===== Prompt
# the prompt string is first subjected to parameter expansion, command substitution and arithmetic expansion
setopt PROMPT_SUBST
# remove any right prompt from display when accepting a command line. This may be useful with terminals with other cut/paste methods
setopt TRANSIENT_RPROMPT

# ===== Changing Directories
# Make cd push the old directory onto the directory stack
setopt AUTO_PUSHD
# swapped the meaning of cd +1 and cd -1; we want them to mean the opposite of what they mean im csh
setopt PUSHDMINUS
# don’t push multiple copies of the same directory onto the directory stack
setopt PUSHD_IGNORE_DUPS
# if argument to cd is the name of a parameter whose value is a valid directory, it will become the current directory
setopt CDABLEVARS
# do not print the directory stack after pushd or popd
unsetopt PUSHD_SILENT
# if a command is not in the hash table, and there exists an executable directory by that name, perform the cd command to that directory
setopt AUTO_CD

# ===== Expansion and Globbing
# when the current word has a glob pattern, do not insert all the words resulting from the expansion but generate matches as for completion and cycle through them
setopt GLOB_COMPLETE
# more patterns for filename generation
setopt EXTENDED_GLOB

# ===== History
# Allow multiple terminal sessions to all append to one zsh command history
setopt APPEND_HISTORY
# Save each command’s beginning timestamp (in seconds since the epoch) and the duration (in seconds) to the history file
setopt EXTENDED_HISTORY
# Add commands as they are typed, don't wait until shell exit
setopt INC_APPEND_HISTORY
# If the internal history needs to be trimmed to add the current command line, setting this option will cause the oldest history event that has a duplicate to be lost before losing a unique event
setopt HIST_EXPIRE_DUPS_FIRST
# Do not enter command lines into the history list if they are duplicates of the previous event
setopt HIST_IGNORE_DUPS
# remove command lines from the history list when the first character on the line is a space
setopt HIST_IGNORE_SPACE
# When searching history don't display results already cycled through twice
setopt HIST_FIND_NO_DUPS
# remove the history (fc -l) command from the history list when invoked
setopt HIST_NO_STORE
# remove superfluous blanks from each command line being added to the history list
setopt HIST_REDUCE_BLANKS
# whenever the user enters a line with history expansion, don’t execute the line directly
setopt HIST_VERIFY
# this option both imports new commands from the history file, and also causes your typed command
unsetopt SHARE_HISTORY

# ===== Completion
# show completion menu on successive tab press ... needs unsetop menu_complete to work
setopt AUTO_MENU
# automatically list choices on an ambiguous completion
setopt AUTO_LIST
# when listing files that are possible completions, show the type of each file with a trailing identifying mark
setopt LIST_TYPES
# extra completion
setopt COMPLETE_ALIASES
# if unset, the cursor is set to the end of the word if completion is started. Otherwise it stays there and completion is done from both ends
setopt COMPLETE_IN_WORD
# if a completion is performed with the cursor within a word, and a full completion is inserted, the cursor is moved to the end of the word
setopt ALWAYS_TO_END
# do not autoselect the first completion entry
unsetopt MENU_COMPLETE
# do not set auto_name_dirs because it messes up prompts (any parameter that is set to the absolute name of a directory immediately becomes a name for that directory)
unsetopt AUTO_NAME_DIRS

# ===== Correction
# no spelling correction for commands
unsetopt CORRECT
# no spelling correction for arguments
unsetopt CORRECT_ALL

# ===== Scripts and Functions
# # perform implicit tees or cats when multiple redirections are attempted
setopt MULTIOS
############# END SETOPT ##################################

# Two regular plugins loaded without investigating.
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma/fast-syntax-highlighting

# Plugin history-search-multi-word loaded with investigating.
zinit load zdharma/history-search-multi-word

# Load the pure theme, with zsh-async library that's bundled with it.
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew; you can also use https://github.com/ogham/exa)
zinit ice wait lucid reset \
    atclone"local P=${${(M)OSTYPE:#*darwin*}:+g}
            \${P}sed -i \
            '/DIR/c\DIR 38;5;63;1' LS_COLORS; \
            \${P}dircolors -b LS_COLORS > c.zsh" \
    atpull'%atclone' pick"c.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light trapd00r/LS_COLORS


# Binary release in archive, from GitHub-releases page.
# After automatic unpacking it provides program "fzf".
zinit lucid from"gh-r" as"null" light-mode sbin"fzf" for \
  atclone='mkdir -p $ZPFX/share/man/man1' atpull='%atclone' \
  junegunn/fzf-bin

# sharkdp/{fd/bat}
zinit wait lucid from"gh-r" as"null" sbin"**/fd" \
  dl'https://raw.githubusercontent.com/sharkdp/fd/master/doc/fd.1' \
  atclone'cp fd.1 $ZPFX/share/man/man1' atpull='%atclone' for \
    @sharkdp/fd

zinit wait lucid from"gh-r" as"null" sbin"**/bat" for \
  @sharkdp/bat

# direnv
zinit from"gh-r" light-mode as"program" mv"direnv* -> direnv" \
  atclone='./direnv hook zsh > zhook.zsh' atpull='%atclone' \
  pick"direnv" src="zhook.zsh" for \
    direnv/direnv

# asdf
zinit from"gh" light-mode as"program" \
  atclone='ASDF_DIR="$PWD" ' \
  atinit='export ASDF_DIR="$PWD"' \
  atpull='%atclone' \
  atload='. $ASDF_DIR/asdf.sh' for \
    @asdf-vm/asdf

# z.lua
#eval "$(lua $HOME/github/utils/z.lua/z.lua --init zsh enhanced once fzf)"
if (( $+commands[lua] )) ; then
  zinit wait lucid light-mode id-as=zlua \
    atclone='lua z.lua --init zsh enhanced once fzf > zlua.gen.zsh' \
    atpull="%atclone" pick="zlua.gen.zsh" for \
      skywind3000/z.lua
fi

# pipx completion
#eval "$(register-python-argcomplete pipx)"
# make this the last turbo mode loading due to the atload command
if (( $+commands[register-python-argcomplete] && $+commands[pipx] )) ; then
  zinit wait lucid light-mode id-as=pipx \
    atclone='register-python-argcomplete pipx > pipx.gen.zsh' \
    atpull="%atclone" pick="pipx.gen.zsh" for \
      zdharma/null
fi

# File path for completion
fpath=(
  ${HOME}/.local/completions
  ${ASDF_DIR}/completions
  $fpath
)

# zsh completion
zinit wait"1" light-mode lucid atload"zicompinit; zicdreplay" blockf for \
    zsh-users/zsh-completions

zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '-- %d --'
zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:complete:*:options' sort false
zstyle ':fzf-tab:complete:_zlua:*' query-string input
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
zstyle ':completion:*' menu select
zmodload zsh/complist

# Command line keybinding
# Emacs binding
#bindkey -e

# Vi with some Emacs flavor control keys.
bindkey -v
export KEYTIMEOUT=1

bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
bindkey "^K" kill-line
bindkey "^L" clear-screen
bindkey "^R" history-incremental-search-backward
bindkey "^U" kill-whole-line
bindkey "^W" backward-kill-word
bindkey "^Y" yank

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -v '^?' backward-delete-char

# 'v' in visual mode opens VIM to edit the command in a full editor.
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line


# Bash completions
autoload -Uz bashcompinit; bashcompinit

# This must always be last so that I can control or customise application startups
# .local/bin and my bin
PATH=${HOME}/.local/bin:${PATH}
PATH=${HOME}/bin:${PATH}

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path
path=( ${path[@]:#*asdf/bin*} )
export PATH

#neofetch
if [ -v ${VIRTUAL_ENV} ]; then
  neofetch
fi
