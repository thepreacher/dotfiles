#!/usr/bin/env zsh

# export default brew env settings
export HOMEBREW_PREFIX="/usr/local";
export HOMEBREW_CELLAR="/usr/local/Cellar";
export HOMEBREW_REPOSITORY="/usr/local/Homebrew";

# XDG Base Directories
export XDG_CACHE_HOME=${HOME}/.cache
export XDG_CONFIG_HOME=${HOME}/.config
export XDG_DATA_HOME=${HOME}/.local/share
export XDG_BIN_HOME=${HOME}/.local/bin
export XDG_LIB_HOME=${HOME}/.local/lib

# https://kevinjalbert.com/more-shell-history/
# zsh history file location
export HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history

# Increase Bash Zsh history size. Allow 32³ entries; the default is 500.
export HISTSIZE='32768'
export SAVEHIST=${HISTSIZE}

# Locale
if [[ -z "$LANG" ]]; then
  # Prefer GB English and use UTF-8
  export LC_ALL='en_GB.UTF-8'
  export LANG='en_GB'
fi

# Browser
if [[ "$OSTYPE" == darwin* ]]; then
  export BROWSER='open'
fi

# Make vim the default editor.
export EDITOR='vim'

# Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY=~/.node_history
# Allow 32³ entries; the default is 1000.
export NODE_REPL_HISTORY_SIZE=${HISTSIZE}
# Use sloppy mode by default, matching web browsers.
export NODE_REPL_MODE='sloppy'
# Node path (to appease ncu-check)
#export NODE_PATH=$(pnpm root --quiet -g)

# Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
export PYTHONIOENCODING='UTF-8'

# Use colors for cli
export CLICOLOR=1
export CLICOLOR_FORCE=1

# Set the default Less options.
LESS_TERMCAP_md=$'\e[01;31m'
LESS_TERMCAP_me=$'\e[0m'
LESS_TERMCAP_se=$'\e[0m'
LESS_TERMCAP_so=$'\e[01;44;33m'
LESS_TERMCAP_ue=$'\e[0m'
LESS_TERMCAP_us=$'\e[01;32m'

# Syntax highlighting in `less` and `man`
export PAGER='less'
export LESS='-giR'
export READNULLCMD='bat'
export MANPAGER="sh -c 'col -bpx | bat -l man'"
export BAT_PAGER="less $LESS"

# Avoid issues with `gpg` as installed via Homebrew.
# https://stackoverflow.com/a/42265848/96656
export GPG_TTY=$(tty)

# Hide the “default interactive shell is now zsh” warning on macOS.
export BASH_SILENCE_DEPRECATION_WARNING=1

# Virtualenv
export WORKON_HOME=${HOME}/.virtualenvs

# Android Sdk
export ANDROID_SDK_ROOT=${HOME}/Library/Android/sdk
export ANDROID_HOME=${HOME}/Library/Android/sdk

# Flutter (Dart SDK)
export FLUTTER_ROOT=${HOME}/sdks/flutter/bin

# Vim
export VIMCONFIG=${HOME}/.config/nvim
export VIMDATA=${HOME}/.local/share/nvim
export VISUAL=vim

# Homebrew
export HOMEBREW_INSTALL_CLEANUP=1
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

# Grep output color
export GREP_COLOR="00;38;5;226"

# Rust
export RUST_SRC_PATH=${HOME}/github/rust

# Golang
export GOPATH=${HOME}/go

# If set, always use fancy mode when invoking pipenv shell.
export PIPENV_SHELL_FANCY=1
#export PIPENV_VENV_IN_PROJECT=1


# Make direnv silent by default.
export DIRENV_LOG_FORMAT=

# fzf configs
# https://medium.com/better-programming/boost-your-command-line-productivity-with-fuzzy-finder-985aa162ba5d
export FZF_DEFAULT_OPTS="
--layout=reverse
--info=inline
--height=100%
--multi
--preview-window=:hidden
--color='hl:148,hl+:154,pointer:032,marker:010,bg+:237,gutter:008'
--prompt='∼ ' --pointer='▶' --marker='✓'
--bind '?:toggle-preview'
--bind 'ctrl-a:select-all'
--bind 'ctrl-y:execute-silent(echo {+} | pbcopy)'
--bind 'ctrl-e:execute(echo {+} | xargs -o vim)'
--bind 'ctrl-v:execute(code {+})'"

export FZF_DEFAULT_COMMAND='fd --type f --color=always' # Setting fd as the default source for fzf
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND" # To apply the command to CTRL-T as well

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --color=always --exclude ".git" --exclude 'node_modules' . "$1"
}
# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --color=always --exclude ".git" --exclude 'node_modules' . "$1"
}

# ### To fix python build issues with zlib and gettext ###########################
# export PYTHON_CONFIGURE_OPTS="--enable-unicode=ucs2";

# # xcode commandline path
#CPPFLAGS="${CPPFLAGS} -I$(xcrun --show-sdk-path)/usr/include"
# update this for every new macOSX version
#export SDKROOT="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk MACOSX_DEPLOYMENT_TARGET=10.15"

# # zlib
#LDFLAGS="${LDFLAGS} -L$(brew --prefix zlib)/lib";
#CPPFLAGS="${CPPFLAGS} -I$(brew --prefix zlib)/include";

# # sqlite
# LDFLAGS="${LDFLAGS} -L$(brew --prefix sqlite)/lib";
# CPPFLAGS="${CPPFLAGS} -I$(brew --prefix sqlite)/include";

# # readline
#LDFLAGS="${LDFLAGS} -L$(brew --prefix readline)/lib";
#CPPFLAGS="${CPPFLAGS} -I$(brew --prefix readline)/include";

# # openssl
#LDFLAGS="${LDFLAGS} -L$(brew --prefix openssl)/lib";
#CPPFLAGS="${CPPFLAGS} -I$(brew --prefix openssl)/include";

# # Gettext
#LDFLAGS="${LDFLAGS} -L/usr/local/opt/gettext/lib";
#CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/gettext/include";

# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig";
# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/sqlite/lib/pkgconfig";

# LLVM3
#export LDFLAGS;
#export CPPFLAGS

# Docbook
export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"

# SDK Man
#export SDKMAN_DIR="$HOME/.sdkman"

# Required to enable Python to build dynamic library
# See: https://github.com/danhper/asdf-python/issues/38 (for macos only)
export PYTHON_CONFIGURE_OPTS="--enable-framework"

# Enable IEX Shell History
export ERL_AFLAGS="-kernel shell_history enabled"

# Setup PKG_CONFIG_PATH
export PKG_CONFIG_PATH=/usr/local/opt/sqlite/lib/pkgconfig

# For building Erlang with asdf-vm
export KERL_CONFIGURE_OPTIONS="--disable-debug --without-javac --with-ssl=/usr/local/opt/openssl@1.1"

# Compiler flags

# Sqlite3
#LDFLAGS="-L/usr/local/opt/sqlite/lib"
#CPPFLAGS="-I/usr/local/opt/sqlite/include"

# C-C++
#==> Caveats
#To use the bundled libc++ please add the following LDFLAGS:
#  LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"

#LDFLAGS="-L/usr/local/opt/llvm/lib"
#CPPFLAGS="-I/usr/local/opt/llvm/include"


LDFLAGS=${LDFLAGS}
CPPFLAGS=${CPPFLAGS}
CFLAGS=${CFLAGS}

# Export Compiler Flags
export LDFLAGS
export CPPFLAGS
export CFLAGS
